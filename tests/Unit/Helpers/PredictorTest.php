<?php

namespace Tests\Unit\Helpers;

use App\Helpers\Predictor;
use App\Models\Game;
use App\Models\Result;
use Illuminate\Database\Eloquent\Collection;
use Tests\TestCase;

class PredictorTest extends TestCase
{
    private Predictor $helper;

    private Game $game;

    protected function setUp(): void
    {
        $this->game = \Mockery::mock(Game::class);
        $this->helper = new Predictor($this->game);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic unit test example.
     */
    public function test_example(): void
    {
        $stats = [];
        $result = \Mockery::mock(Result::class);
        $result->shouldReceive('getAttribute')->with('team_id')->andReturn(1);
        $result->shouldReceive('getAttribute')->with('points')->andReturn(3);
        $stats[] = $result;

        $result = \Mockery::mock(Result::class);
        $result->shouldReceive('getAttribute')->with('team_id')->andReturn(2);
        $result->shouldReceive('getAttribute')->with('points')->andReturn(0);
        $stats[] = $result;
        $statsCollection = \Mockery::mock(Collection::class);
        $statsCollection->shouldReceive('all')->andReturn($stats);

        $unplayedGames = [];

        $game = \Mockery::mock(Game::class);
        $game->shouldReceive('getAttribute')->with('home_team_id')->andReturn(1);
        $game->shouldReceive('getAttribute')->with('away_team_id')->andReturn(2);
        $unplayedGames[] = $game;

        $game = \Mockery::mock(Game::class);
        $game->shouldReceive('getAttribute')->with('home_team_id')->andReturn(2);
        $game->shouldReceive('getAttribute')->with('away_team_id')->andReturn(1);
        $unplayedGames[] = $game;

        $unplayedGames = collect($unplayedGames);

        $this->game->expects('where')->once()->with('is_played', false)->andReturnSelf();
        $this->game->expects('get')->once()->andReturn($unplayedGames);

        $predictions = [
            1 => 88.8888,
            2 => 11.111111,
        ];
        $result = $this->helper->predict($statsCollection);

        $this->assertEqualsWithDelta($predictions, $result, 0.001);

    }
}
